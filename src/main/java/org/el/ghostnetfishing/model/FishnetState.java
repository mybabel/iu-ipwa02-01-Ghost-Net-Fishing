package org.el.ghostnetfishing.model;
// Generated 10.07.2023 08:34:19 by Hibernate Tools 5.2.0.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * FishnetState generated by hbm2java
 */
@Entity
@Table(name = "fishnet_state", catalog = "ghost_net_fishing")
public class FishnetState implements java.io.Serializable, Comparable<FishnetState> {

	/**
	 * Uniquely identify the version of a serializable.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Unique identifier of FishnetState.
	 */
	private int id;
	
	/**
	 * Description for FishnetState.
	 */
	private String description;
	
	/**
	 * When setted, it allows the state to be recovered.
	 */
	private boolean relevantForRecoveryFlag;
	
	/**
	 * {@link org.el.ghostnetfishing.model.Fishnet collection} contains unique fishnets. 
	 */
	private Set<Fishnet> fishnets = new HashSet<Fishnet>(0);
	
	public FishnetState() {
	}

	public FishnetState(int id) {
		this.id = id;
	}
	public FishnetState(int id, String description, boolean relevantForRecoveryFlag, Set<Fishnet> fishnets) {
		this.id = id;
		this.description = description;
		this.relevantForRecoveryFlag = relevantForRecoveryFlag;
		this.fishnets = fishnets;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "description", length = 50)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "relevant_for_recovery_flag", nullable = false)
	public boolean isRelevantForRecoveryFlag() {
		return relevantForRecoveryFlag;
	}

	public void setRelevantForRecoveryFlag(boolean relevantForRecoveryFlag) {
		this.relevantForRecoveryFlag = relevantForRecoveryFlag;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fishnetState", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<Fishnet> getFishnets() {
		return this.fishnets;
	}

	public void setFishnets(Set<Fishnet> fishnets) {
		this.fishnets = fishnets;
	}
	
	/**
	 * Computes the hash value with prime number 31.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	/**
	 * Compares this object to FishnetState object.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof FishnetState)) {
			return false;
		}
		FishnetState other = (FishnetState) obj;
		if (id != other.id) {
			return false;
		}
		return true;
	}

	/**
	 * Returns status of the fishnet as description.
	 */
	@Override
	public String toString() {
		return "Fischnetzstatus [" + description + "]";
	}

	/**
	 * Compares the FishnetState object for sorting.
	 */
	@Override
	public int compareTo(FishnetState o) {
		// TODO Auto-generated method stub
		return 0;
	}
}
