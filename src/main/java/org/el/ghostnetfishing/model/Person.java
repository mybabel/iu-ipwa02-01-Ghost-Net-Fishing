package org.el.ghostnetfishing.model;
// Generated 10.07.2023 08:34:19 by Hibernate Tools 5.2.0.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Person generated by hbm2java
 */
@Entity
@Table(name = "person", catalog = "ghost_net_fishing")
public class Person implements java.io.Serializable {

	/**
	 * Uniquely identify the version of a serializable.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Unique identifier of Person.
	 */
	private Integer id;
	
	/**
	 * {@link org.el.ghostnetfishing.model.PersonType personType} for person. 
	 */
	private PersonType personType;
	
	/**
	 * Person name.
	 */
	private String name;
	
	/**
	 * Telephone number for person.
	 */
	private String telephoneNumber;
	
	/**
	 * {@link org.el.ghostnetfishing.model.Fishnet Collection} for ids of reporting persons. 
	 */	
	private Set<Fishnet> fishnetsForSalvagingPersonId = new HashSet<Fishnet>(0);
	
	/**
	 * {@link org.el.ghostnetfishing.model.Fishnet Collection} for ids of recovering persons. 
	 */	
	private Set<Fishnet> fishnetsForRecoveryMessagingPersonId = new HashSet<Fishnet>(0);

	public Person() {
	}

	public Person(PersonType personType, String name, String telephoneNumber) {
		this.personType = personType;
		this.name = name;
		this.telephoneNumber = telephoneNumber;
	}
	public Person(PersonType personType, String name, String telephoneNumber,
			Set<Fishnet> fishnetsForSalvagingPersonId,
			Set<Fishnet> fishnetsForRecoveryMessagingPersonId) {
		this.personType = personType;
		this.name = name;
		this.telephoneNumber = telephoneNumber;
		this.fishnetsForSalvagingPersonId = fishnetsForSalvagingPersonId;
		this.fishnetsForRecoveryMessagingPersonId = fishnetsForRecoveryMessagingPersonId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "person_type_id", nullable = false)
	public PersonType getPersonType() {
		return this.personType;
	}

	public void setPersonType(PersonType personType) {
		this.personType = personType;
	}

	@Column(name = "name", nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "telephone_number", nullable = true, length = 50)
	public String getTelephoneNumber() {
		return this.telephoneNumber;
	}

	public void setTelephoneNumber(String telephoneNumber) {
		this.telephoneNumber = telephoneNumber;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personBySalvagingPersonId", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<Fishnet> getFishnetsForSalvagingPersonId() {
		return this.fishnetsForSalvagingPersonId;
	}

	public void setFishnetsForSalvagingPersonId(
			Set<Fishnet> fishnetsForSalvagingPersonId) {
		this.fishnetsForSalvagingPersonId = fishnetsForSalvagingPersonId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personByRecoveryMessagingPersonId", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<Fishnet> getFishnetsForRecoveryMessagingPersonId() {
		return this.fishnetsForRecoveryMessagingPersonId;
	}

	public void setFishnetsForRecoveryMessagingPersonId(
			Set<Fishnet> fishnetsForRecoveryMessagingPersonId) {
		this.fishnetsForRecoveryMessagingPersonId = fishnetsForRecoveryMessagingPersonId;
	}

	/**
	 * Computes the hash value with prime number 31.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/**
	 * Compares this object to Person object.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Person)) {
			return false;
		}
		Person other = (Person) obj;
		if (id != null) {
			if (!id.equals(other.id)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Returns persons name.
	 */
	@Override
	public String toString() {
		return " [" + name + "]";
	}
}
