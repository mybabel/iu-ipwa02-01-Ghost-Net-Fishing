package org.el.ghostnetfishing.model;
// Generated 10.07.2023 08:34:19 by Hibernate Tools 5.2.0.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * PersonType generated by hbm2java
 */
@Entity
@Table(name = "person_type", catalog = "ghost_net_fishing")
public class PersonType implements java.io.Serializable, Comparable<PersonType> {

	/**
	 * Uniquely identify the version of a serializable.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Unique identifier of PersonType.
	 */
	private Integer id;
	
	/**
	 * Description for person type.
	 */
	private String description;
	
	/**
	 * When setted, the telephonenumer is required for a person type.
	 */
	private boolean telephoneNumberRequired;
	
	/*
	 * When setted, allows a person type to recover a fishnet.
	 */
	private boolean allowedToRecover;
	
	/**
	 * {@link org.el.ghostnetfishing.model.Person Collection} for unique persons.
	 */
	private Set<Person> persons = new HashSet<Person>(0);

	public PersonType() {
	}
	
	public PersonType(int id) {
		this.id = id;
	}

	public PersonType(String description, boolean telephoneNumberRequired) {
		this.description = description;
		this.telephoneNumberRequired = telephoneNumberRequired;
	}
	public PersonType(String description, boolean telephoneNumberRequired, Set<Person> persons) {
		this.description = description;
		this.persons = persons;
		this.telephoneNumberRequired = telephoneNumberRequired;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "description", nullable = false, length = 50)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	
	@Column(name = "telephone_number_required", nullable = false)
	public boolean isTelephoneNumberRequired() {
		return telephoneNumberRequired;
	}

	public void setTelephoneNumberRequired(boolean telephoneNumberRequired) {
		this.telephoneNumberRequired = telephoneNumberRequired;
	}
	
	@Column(name = "allowed_to_recover", nullable = true)
	public boolean isAllowedToRecover() {
		return allowedToRecover;
	}

	public void setAllowedToRecover(boolean allowedToRecover) {
		this.allowedToRecover = allowedToRecover;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "personType", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<Person> getPersons() {
		return this.persons;
	}

	public void setPersons(Set<Person> persons) {
		this.persons = persons;
	}

	/**
	 * Computes the hash value with prime number 31.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/**
	 * Compares this object to PersonType object.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof PersonType)) {
			return false;
		}
		PersonType other = (PersonType) obj;
		if (id != null) {
			if (!id.equals(other.id)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Returns status of the person as description.
	 */
	@Override
	public String toString() {
		return "Personentyp [" + description + "]";
	}

	/**
	 * Compares the PersonType object for sorting.
	 */
	@Override
	public int compareTo(PersonType o) {
		// TODO Auto-generated method stub
		return 0;
	}
}
