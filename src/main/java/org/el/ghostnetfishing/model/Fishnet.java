package org.el.ghostnetfishing.model;
// Generated 10.07.2023 08:34:19 by Hibernate Tools 5.2.0.Final

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Min;

/**
 * Fishnet generated by hbm2java
 */
@Entity
@Table(name = "fishnet", catalog = "ghost_net_fishing")
public class Fishnet implements java.io.Serializable {

	/**
	 * Uniquely identify the version of a serializable.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Unique identifier of Fishnet.
	 */
	private int id;
	
	/**
	 * {@link org.el.ghostnetfishing.model.FishnetState state} of fishnet. 
	 */
	private FishnetState fishnetState;
	
	/**
	 * {@link org.el.ghostnetfishing.model.Person Person} who submited the fishnet.
	 */
	private Person personBySalvagingPersonId;
	
	/**
	 * {@link org.el.ghostnetfishing.model.Person Person} who recovers the fishnet.
	 */
	private Person personByRecoveryMessagingPersonId;
	
	/**
	 *  Size of the fishnet.
	 *  Min value is 1.
	 */
	@Min(1)
	private double size;
	
	/**
	 * Latitude of the fishnet on the worldmap.
	 * Validation of min and max values for coordinates on the map.
	 */
	@DecimalMax(value = "90.00")
	@DecimalMin(value = "-90.00")
	private double latitude;
	
	/**
	 * Longitude of the fishnet on the worldmap.
	 * Validation of min and max values for coordinates on the map.
	 */
	@DecimalMax(value = "180.00")
	@DecimalMin(value = "-180.00")
	private double longitude;
	
	/**
	 * {@link org.el.ghostnetfishing.model.FishnetState new state} for fishnet. 
	 * Used when the status changed by person.
	 */
	private FishnetState newFishnetState;

	public Fishnet() {
	}

	public Fishnet(int id, double size, double latitude, double longitude) {
		this.id = id;
		this.size = size;
		this.latitude = latitude;
		this.longitude = longitude;
	}
	public Fishnet(int id, FishnetState fishnetState,
			Person personBySalvagingPersonId,
			Person personByRecoveryMessagingPersonId, double size,
			double latitude, double longitude, FishnetState newFishnetState) {
		this.id = id;
		this.fishnetState = fishnetState;
		this.personBySalvagingPersonId = personBySalvagingPersonId;
		this.personByRecoveryMessagingPersonId = personByRecoveryMessagingPersonId;
		this.size = size;
		this.latitude = latitude;
		this.longitude = longitude;
		this.newFishnetState = newFishnetState;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fishnet_state_id")
	public FishnetState getFishnetState() {
		return this.fishnetState;
	}

	public void setFishnetState(FishnetState fishnetState) {
		this.fishnetState = fishnetState;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "salvaging_person_id")
	public Person getPersonBySalvagingPersonId() {
		return this.personBySalvagingPersonId;
	}

	public void setPersonBySalvagingPersonId(Person personBySalvagingPersonId) {
		this.personBySalvagingPersonId = personBySalvagingPersonId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "recovery_messaging_person_id")
	public Person getPersonByRecoveryMessagingPersonId() {
		return this.personByRecoveryMessagingPersonId;
	}

	public void setPersonByRecoveryMessagingPersonId(
			Person personByRecoveryMessagingPersonId) {
		this.personByRecoveryMessagingPersonId = personByRecoveryMessagingPersonId;
	}

	@Column(name = "size", nullable = false, precision = 22, scale = 0)
	public double getSize() {
		return this.size;
	}

	public void setSize(double size) {
		this.size = size;
	}

	@Column(name = "latitude", nullable = false, precision = 22, scale = 0)
	public double getLatitude() {
		return this.latitude;
	}

	public void setLatitude(double latitude) {
		this.latitude = latitude;
	}

	@Column(name = "longitude", nullable = false, precision = 22, scale = 0)
	public double getLongitude() {
		return this.longitude;
	}

	public void setLongitude(double longitude) {
		this.longitude = longitude;
	}
	
	/**
	 * Field is not persistent.
	 * @return changed fishnet state.
	 */
	@Transient
	public FishnetState getNewFishnetState() {
		return newFishnetState;
	}

	public void setNewFishnetState(FishnetState newFishnetState) {
		this.newFishnetState = newFishnetState;
	}

	/**
	 * Computes the hash value with prime number 31.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	/**
	 * Compares this object to fishnet object.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Fishnet)) {
			return false;
		}
		Fishnet other = (Fishnet) obj;
		if (id != other.id) {
			return false;
		}
		return true;
	}
}
